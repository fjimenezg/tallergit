## Ejercicio 3

### 3.1. Preguntas

1. ¿Qué es un conflicto? Cuando ocurre? ¿Es bueno o malo?

    Es una interferencia que existe entre una branch y otra, cuando en estas se ha editado las mismas líneas de uno o varios archivos,
    generando iincertidumbre acerca de qué versión del o los archivos sería la adecuada para fusionarse con el proyecto principal.
    Pues esto ocurre cuando se quiere hacer un merge y definitivamente son malas noticias, pero esto puede ser corregido manualmente por
    la o las personas que supervisen el código.

2. ¿Se puede evitar un conflicto? ¿Cómo?

    Existen estrategias para evitar estos conflictos, pero dependen de las buenas prácticas del grupo de trabajo, como por ejemplo:

    - Fusiones frecuentes con la rama principal para mantener actualizada la información
    - Mantener cambios pequeños y enfocados para no interferir con las modificaciones de otros desarrolladores
    - Realizar pull requests, para revisar los cambios antes de fusionarlos

### 3.2. Ejercicio Práctico

1. Crear un archivo `nombre_apellido.txt` dentro de la carpeta `3.conflicts`.
2. Crear una nueva branch `suprema` a partir de la branch `main`. (Puede usar el comando `git checkout -b suprema`).
3. Moverse a la branch `suprema`. (Puede usar el comando `git checkout`).
4. Cambiar el contenido del archivo `3.conflicts/milanesa.txt` donde dice lomo por `pollo`.
5. "Commitear" los cambios. (Puede usar el comando `git commit -am "Cambio de lomo a pollo"`).
6. Moverse a la branch `main`. (Puede usar el comando `git checkout`).
7. Crear una nueva branch `bife` a partir de la branch `main`. (Puede usar el comando `git checkout -b bife`).
8. Moverse a la branch `bife`. (Puede usar el comando `git checkout`).
9. Cambiar el contenido del archivo `3.conflicts/milanesa.txt` donde dice lomo por `bife`. 
10. Haga un `git diff main suprema` y un `git diff main bife`. ¿Qué observa? 
11. Moverse a la branch `main`. Corra un `git status`, ¿qué observa?
12. Ejecute `git merge bife`. Funcionó?
13. Ejecute `git merge suprema`. Funcionó?
14. Ejecute `git status`. Que observa?
15. Vea el contenido del archivo `3.conflicts/milanesa.txt`. ¿Qué observa?
16. Aborte el merge. (Puede usar el comando `git merge --abort`).
17. Vuelva a ejecutar `git merge suprema`.
18. Resuelva el conflicto manualmente.

## Finalizado

Una vez finalizado el ejercicio, recuerde guardar sus cambios en `nombre_apellido.txt` y subirlos a **su** repositorio remoto. Este archivo (`README.md`) y `milanesa.txt` tienen que mantenerse sin ningún cambio.

Para volver a `milanesa.txt` a su estado original, debe buscar el commit que lo contiene y correr el comando:
```bash
git checkout [commit ID] -- 3.conflicts/milanesa.txt

# ó

git checkout [commit ID] -- milanesa.txt

# dependiendo de donde esté ubicado
```