## Ejercicio 3

### Solución Preguntas

3.1 ¿Qué es un conflicto?
     Rta/Un conflicto en Git ocurre cuando dos ramas tienen cambios incompatibles en la misma parte de un archivo, y Git no puede fusionarlos automáticamente. Esto sucede cuando:
     Dos personas modifican la misma línea de código en archivos diferentes,
     Una persona elimina un archivo mientras otra lo modifica o se hacen cambios en la misma línea de código en dos ramas diferentes.

3.2 ¿Cuándo ocurre?
     Rta/Los conflictos ocurren durante operaciones que intentan combinar cambios,en operaciones como Merge o Pull

3.3 ¿Es bueno o malo?
     Rta/No es ni bueno ni malo se puede decir que es una situación manejable y normal en el desarrollo colaborativo. 
     Los conflictos son una señal de que dos personas han trabajado en la misma parte del código,
     lo cual es común en equipos.

2. ¿Se puede evitar un conflicto? ¿Cómo?
     Rta/Aunque los conflictos son inevitables en proyectos colaborativos, hay estrategias para minimizarlos entre las cuales tenemos:
     a.Comunicación en el equipo
     b.Trabajar en ramas pequeñas y específicas
     c.Actualizar tu rama con frecuencia

### 3.2. Solución ejercicio Práctico

1. Crear un archivo `nombre_apellido.txt` dentro de la carpeta `3.conflicts`.
2. Crear una nueva branch `suprema` a partir de la branch `main`. (Puede usar el comando `git checkout -b suprema`).
3. Moverse a la branch `suprema`. (Puede usar el comando `git checkout`).
4. Cambiar el contenido del archivo `3.conflicts/milanesa.txt` donde dice lomo por `pollo`.
5. "Commitear" los cambios. (Puede usar el comando `git commit -am "Cambio de lomo a pollo"`).
6. Moverse a la branch `main`. (Puede usar el comando `git checkout`).
7. Crear una nueva branch `bife` a partir de la branch `main`. (Puede usar el comando `git checkout -b bife`).
8. Moverse a la branch `bife`. (Puede usar el comando `git checkout`).
9. Cambiar el contenido del archivo `3.conflicts/milanesa.txt` donde dice lomo por `bife`. 
10. Haga un `git diff main suprema` y un `git diff main bife`. ¿Qué observa? 
11. Moverse a la branch `main`. Corra un `git status`, ¿qué observa?
12. Ejecute `git merge bife`. Funcionó?
13. Ejecute `git merge suprema`. Funcionó?
14. Ejecute `git status`. Que observa?
15. Vea el contenido del archivo `3.conflicts/milanesa.txt`. ¿Qué observa?
16. Aborte el merge. (Puede usar el comando `git merge --abort`).
17. Vuelva a ejecutar `git merge suprema`.
18. Resuelva el conflicto manualmente.

## Finalizado

Una vez finalizado el ejercicio, recuerde guardar sus cambios en `nombre_apellido.txt` y subirlos a **su** repositorio remoto. Este archivo (`README.md`) y `milanesa.txt` tienen que mantenerse sin ningún cambio.

Para volver a `milanesa.txt` a su estado original, debe buscar el commit que lo contiene y correr el comando:
```bash
git checkout [commit ID] -- 3.conflicts/milanesa.txt

# ó

git checkout [commit ID] -- milanesa.txt

# dependiendo de donde esté ubicado
```
