## Ejercicio 1

### 1.1 Preguntas:

1. ¿Cómo se inicializa un repositorio local? (que comando se debe ejecutar?)
--> Respuesta: Para nosotros poder inicializar un repositorio local debemos utilizar el comando 
               git init lo que crea una carpeta oculta .git y nos permite hacer todas las acciones
               propias de un repositorio  


2. ¿Cómo hago para que un directorio deje de ser controlado por git? (que comando se debe ejecutar?)
--> Respuesta: El comando que nosotros debemos utilizar para que el directorio ya no sea controlado
               por git es git rm -r --cached "nombre_directorio" en adición si solo queremos un directorio
               especifico que sera ingnorado podemos hacer uso del .gitignore.


3. Si agrego un archivo a un directorio que ya está siendo controlado por git, ¿está siendo controlado por git?
--> Respuesta: Si un directorio padre está siendo controlado por Git, todos los archivos y subdirectorios
               dentro de él también estarán bajo control de Git, a menos que se especifique
               lo contrario en .gitignore

4. ¿Qué comando se utiliza para agregar un archivo al repositorio local?
--> Respuesta: Para poder agregar un archivo al repositorio local se utiliza el comando --> git add .
               con . serian todos los archivos aunque también podemos agregar archivos de manera
               individual especificando el nombre de estos  

5. ¿Cómo determino que archivos fueron modificados? (que comando se debe ejecutar?)
--> Respuesta: El comando que debemos utilizar en este caso es git status este nos va a mostrar
               información general de todos los archivos modificados, añadidos o eliminados
               dentro del repositorio 


6. ¿Qué comando se utiliza para hacer un commit? 
--> Respuesta: El comando que se tiene que utilizar es --> git commit adicionamente se puede usar
               la bandera -m para poder especificar un comentario que acompañe este commit 


7. En sus propias palabras, ¿qué es un commit?
--> Respuesta: Un commit es un registro de los cambios realizados en un repositorio de Git. Un commit
               podriamos decir que es como un checkpoint en un videojuego nos permite guardar nuestro
               proceso, y, si es necesario, volver a él más adelante; especificando los cambios con un
               pequeño mensaje similar al nombre que le ponemos al checkpoint para saber donde estamos.




-------------------------------------------------------------------------------------------------------
## 1.2 Ejercicio Practico

3. Antes de realizar cualquier acción con git, guarde el estado actual del directorio en el archivo `nombre_apellido.txt`. Para esto, se debe ejecutar el comando `git status` y copiar el resultado en el archivo `nombre_apellido.txt`. Explique que significa la salida del comando.

Explicación: El comando status nos permite ver que archivos han sido modificados, añadidos o eliminados
             en este caso podemos ver que el archivo sandwich.txt ha sido modificado y el archivo
             luis_medina.txt ha sido añadido y no esta presente en el staging area          

Resultado del comando:
----------------------------------------------------------------------------------------------------
$ git status
On branch luis_medina
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   1.commit/sandwich.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        1.commit/luis_medina.txt

no changes added to commit (use "git add" and/or "git commit -a")
----------------------------------------------------------------------------------------------------



5.  Explique que cambio en la salida del comando `git status` luego de ejecutar el comando `git add sandwich.txt`.

Explicación: El cambio que podemos ver es que pasamos de "Changes not staged for commit" a 
             "Changes to be committed" lo que sucedio es que pasamos el archivo sandwich.txt al staging
             area y esta listo para ser parte del nuevo commit   

Resultado del comando:
----------------------------------------------------------------------------------------------------
$ git status
On branch luis_medina
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   1.commit/sandwich.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        1.commit/luis_medina.txt
----------------------------------------------------------------------------------------------------

7. Explique que cambio en la salida del comando `git status` luego de ejecutar el comando `git commit -m "Agrego mi sandwich.txt"`.

Explicación: Después de ejecutar git commit, el archivo sandwich.txt ya no aparece en la salida de git
             status porque sus cambios fueron confirmados y no ha sido modificado desde el último commit.
             En cambio, luis_medina.txt sigue apareciendo como un archivo no rastreado, ya que no fue agregado
             al staging area antes del commit.  

Resultado del comando:
----------------------------------------------------------------------------------------------------
$ git status
On branch luis_medina
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        1.commit/luis_medina.txt

nothing added to commit but untracked files present (use "git add" to track)
----------------------------------------------------------------------------------------------------


9. Escriba la salida del comando `git log` en el archivo `nombre_apellido.txt`. Y explique que significa. ¿En qué orden aparecen los commits?

Explicación: Git log nos muestra todos los commits que se han realizado en el repositorio.
             Incluye detalles como el hash del commit, el autor, la fecha y el mensaje asociado.
             Los commits aparecen en orden descendente, es decir, del más reciente al más antiguo.                  

Resultado del comando:
----------------------------------------------------------------------------------------------------
$ git log
commit 3a999b8c3f4558001470852dd79490c8d91efa8c (HEAD -> luis_medina)
Author: LuisMedina <luisalejandromedinab@gmail.com>
Date:   Wed Feb 19 17:11:11 2025 -0500

    Agrego salsas

commit bffcae84b00ff56821bc2824dc455e45707357b4
Author: LuisMedina <luisalejandromedinab@gmail.com>
Date:   Wed Feb 19 17:04:27 2025 -0500

    Agrego mi sandwich.txt

commit fafdc7f0bd9a9a556a616c14ff783605909f3803 (origin/practica2025, origin/main, origin/HEAD, practica2025, main)   
Author: Franklin Jimenez <f.jimenezg@hotmail.com>
Date:   Mon Feb 17 23:45:03 2025 -0500
----------------------------------------------------------------------------------------------------

10. Pruebe las variaciones del comando `git log` y explique que observa en cada una de ellas.


10.1. `git log --oneline`
    
Explicación: El argumento oneline nos permite ver los commits en una sola línea mostrando únicamente el hash
             y el mensaje asociado. Esto es especialmente útil cuando tenemos una gran cantidad de commits
             en el repositorio y necesitamos encontrar el commit específico de manera eficiente

Resultado del comando:
----------------------------------------------------------------------------------------------------
$ git log --oneline
3a999b8 (HEAD -> luis_medina) Agrego salsas
bffcae8 Agrego mi sandwich.txt
fafdc7f (origin/practica2025, origin/main, origin/HEAD, practica2025, main) cambio readme.md
5d6dc69 cambio de rama master a main en documentación
3f74d4d primer commit
----------------------------------------------------------------------------------------------------

10.2. `git log --stat`

Explicación: El argumento --stat nos ofrece más información sobre el commit especificamente qué cambios
             ocurrieron en los archivos de cada commit. Por ejemplo, en el commit 'Agrego salsas', podemos
             ver que se realizaron 7 inserciones y 1 eliminación en el archivo 1.commit/sandwich.txt.   

Resultado del comando:
----------------------------------------------------------------------------------------------------
$ git log --stat
commit 3a999b8c3f4558001470852dd79490c8d91efa8c (HEAD -> luis_medina)
Author: LuisMedina <luisalejandromedinab@gmail.com>
Date:   Wed Feb 19 17:11:11 2025 -0500

    Agrego salsas

 1.commit/sandwich.txt | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

commit bffcae84b00ff56821bc2824dc455e45707357b4
Author: LuisMedina <luisalejandromedinab@gmail.com>
Date:   Wed Feb 19 17:04:27 2025 -0500

    Agrego mi sandwich.txt

----------------------------------------------------------------------------------------------------

11. Inspeccione diferencias entre los commits, use el comando git diff <hash> <hash> y explique que significa cada uno de los resultados.

Explicación: El comando git diff lo que nos permite visualizar los cambios entre un commit y otro
             Esta línea @@ -5,4 +5,10 @@ indica que en la versión anterior (HEAD^) había 4 líneas
             desde la línea 5 en adelante, mientras que en la versión actual (HEAD) hay 10 líneas.
             Con el signo + podemos ver cuáles se adicionaron y con el signo - cuales se removieron

Resultado del comando:
----------------------------------------------------------------------------------------------------
admin@Home MSYS /e/Modelamiento/Git/tallergit (luis_medina)
$ git diff HEAD^ HEAD
diff --git a/1.commit/sandwich.txt b/1.commit/sandwich.txt
index a403998..c809170 100644
--- a/1.commit/sandwich.txt
+++ b/1.commit/sandwich.txt
@@ -5,4 +5,10 @@ queso
 Pollo
 lechuga
 tomate
-pan
\ No newline at end of file
+pan
+
+Salsas:
+Mostaza y miel
+Queso crema y verdeo
+Pesto
+Mayonesa de chipotle
\ No newline at end of file
----------------------------------------------------------------------------------------------------



14. Renombrar el archivo `sandwich2.txt` a `sandwich2_feo.txt`. Para esto, se debe ejecutar el comando `git mv sandwich2.txt sandwich2_feo.txt`. Explique que cambio en la salida del comando `git status` luego de hacer un commit con esos cambios y de `git log --oneline`.

Explicación: Luego de ejecutar git mv sandwich2.txt sandwich2_feo.txt, git status muestra que el archivo ha
             sido renombrado, reflejando tanto su nombre original como el nuevo. Como su contenido no cambió,
             no es necesario usar git add nuevamente. Tras hacer un commit, git log --oneline incluye un nuevo
             registro indicando el cambio de nombre.

Resultado del comando:
----------------------------------------------------------------------------------------------------
$ git status
On branch luis_medina
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        renamed:    1.commit/sandwich2.txt -> 1.commit/sandwich2_feo.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        1.commit/luis_medina.txt


$ git log --oneline
cf4d90a (HEAD -> luis_medina) Renombrado sandwich2.txt a sandwich2_feo.txt
7b627c7 Agregando archivo sandwich2.txt
3a999b8 Agrego salsas
bffcae8 Agrego mi sandwich.txt
fafdc7f (origin/practica2025, origin/main, origin/HEAD, practica2025, main) cambio readme.md
5d6dc69 cambio de rama master a main en documentación
3f74d4d primer commit
----------------------------------------------------------------------------------------------------


15 Borre el archivo `sandwich2_feo.txt`. Para esto, se debe ejecutar el comando `git rm sandwich2_feo.txt`. Explique que cambio en la salida del comando `git status` luego de hacer un commit con esos cambios y de `git log --oneline`.

Explicación: Después de ejecutar git rm sandwich2_feo.txt, git status muestra el archivo como 'deleted',
             reflejando que ha sido eliminado y está en el área de preparación para el próximo commit.
             Luego de hacer el commit, git log --oneline muestra un nuevo registro con la acción de eliminación,
             manteniendo el historial del archivo en versiones anteriores del repositorio.  

Resultado del comando:
----------------------------------------------------------------------------------------------------
$ git status
On branch luis_medina
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        deleted:    1.commit/sandwich2_feo.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        1.commit/luis_medina.txt

$ git log --oneline
e81edad (HEAD -> luis_medina) Eliminando el archivo sandwich2_feo.txt
cf4d90a Renombrado sandwich2.txt a sandwich2_feo.txt
7b627c7 Agregando archivo sandwich2.txt
3a999b8 Agrego salsas
bffcae8 Agrego mi sandwich.txt
fafdc7f (origin/practica2025, origin/main, origin/HEAD, practica2025, main) cambio readme.md
5d6dc69 cambio de rama master a main en documentación
3f74d4d primer commit
----------------------------------------------------------------------------------------------------



16 Inspeccione la bitácora usando `git log --stat` y explique lo que ve.

Explicación: En este comando podemos ver los ultimos dos commits. En el commit "Eliminando el archivo sandwich2_feo.txt"
             podemos ver que no especifica directamente que el archivo fue eliminado sino, que se modificó
             y que todo su contenido fue eliminado.

             En el commit 'Renombrado sandwich2.txt a sandwich2_feo.txt' se indica el cambio de 
             nombre del archivo y tambien muestra que no se realizaron niguna modificación a su contenido.  

Resultado del comando:
----------------------------------------------------------------------------------------------------
admin@Home MSYS /e/Modelamiento/Git/tallergit (luis_medina)
$ git log --stat
commit e81edadbdcd062b8d456c39c254b0a1a11274e43 (HEAD -> luis_medina)
Author: LuisMedina <luisalejandromedinab@gmail.com>
Date:   Wed Feb 19 18:52:21 2025 -0500

    Eliminando el archivo sandwich2_feo.txt

 1.commit/sandwich2_feo.txt | 6 ------
 1 file changed, 6 deletions(-)

commit cf4d90acafceabc64e9127bf6a04ec4f4c08a1e5
Author: LuisMedina <luisalejandromedinab@gmail.com>
Date:   Wed Feb 19 18:45:22 2025 -0500

    Renombrado sandwich2.txt a sandwich2_feo.txt

 1.commit/{sandwich2.txt => sandwich2_feo.txt} | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
----------------------------------------------------------------------------------------------------


Explicación:

Resultado del comando:
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------