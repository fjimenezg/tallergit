## Ejercicio 1

### 1.1. Preguntas

1. ¿Cómo se inicializa un repositorio local? (que comando se debe ejecutar?)
R/ git init
2. ¿Cómo hago para que un directorio deje de ser controlado por git? (que comando se debe ejecutar?)
R/ rm -rf .git
3. Si agrego un archivo a un directorio que ya está siendo controlado por git, ¿está siendo controlado por git?
R/ No, un archivo recién agregado a un directorio controlado por Git no será automáticamente controlado.
   Git solo rastrea los archivos que han sido agregados explícitamente. Se debe usar el comando git add 
   para agregarlo al área de preparación.
4. ¿Qué comando se utiliza para agregar un archivo al repositorio local?
R/ git add "nombre-del-archivo"
5. ¿Cómo determino que archivos fueron modificados? (que comando se debe ejecutar?)
R/ git status
6. ¿Qué comando se utiliza para hacer un commit? 
R/ git commit -m "Mensaje del commit"
7. En sus propias palabras, ¿qué es un commit?
R/ Se le dice commit a la acción de pasar los archivos que ya están en el staging area al .git directory(repositorio)

#####################################################

### 1.2
3.
# salida git status
On branch edwinmunozdanieltobar
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   1.commit/sandwich.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        1.commit/edwin_munoz_daniel_tobar.txt

no changes added to commit (use "git add" and/or "git commit -a")

# Explicación
Nos muestra la rama en la que estamos ubicados, luego nos lista en color rojo los cambios que no están listos para el commit,
seguido de algunas recomendaciones. También se lista en color rojo los archivos que no tienen seguimiento, en este caso 
edwin_munoz_daniel_tobar.txt

5.
La salida del git status en esta ocasión a diferencia de la anterior es que nos lista los cambios listos para hacerles commit 
en color verde y ya no hay una lista de cambios que no están listos para el commit.


7.
Ya no aparece la lista de cambios listos para el commit, la lista de archivos que no tienen seguimiento está igual que antes.

9.
#salida git log
commit b8330855f774c9ce97670de6b78efd2fcd90e251 (HEAD -> edwinmunoz_danieltobar)
Author: Edwin <edwindanilo1110@udenar.edu.co>
Date:   Sat Feb 22 04:13:30 2025 +0800

    Agrego salsas

commit dc8ad993f0c613ea392ff7f00fb22eda74b2ba5b
Author: Edwin <edwindanilo1110@udenar.edu.co>
Date:   Sat Feb 22 04:05:24 2025 +0800

    agrego mi sandwich.txt

commit fafdc7f0bd9a9a556a616c14ff783605909f3803 (origin/practica2025, origin/main, origin/HEAD, main)
Author: Franklin Jimenez <f.jimenezg@hotmail.com>
Date:   Mon Feb 17 23:45:03 2025 -0500

    cambio readme.md

:

Al ejecutar el comando git log nos sale un historial de los commits realizados junto información detallada como un codigo extenso que es el ID del commit,
la branch donde se realizo, el autor y la fecha. Seguido también por el nombre del commit. 
El orden en que aparecen los commits es desde el último commit realizado hasta el primero


10.
# 10.1 salida git log --oneline
b833085 (HEAD -> edwinmunoz_danieltobar) Agrego salsas
dc8ad99 agrego mi sandwich.txt
fafdc7f (origin/practica2025, origin/main, origin/HEAD, main) cambio readme.md
5d6dc69 cambio de rama master a main en documentación
3f74d4d primer commit

Se observa de manera más reducida la información de cada commit, junto con el ID del commit, la rama, quien realizo el commit y el nombre del commit

# 10.2 salida git log --stat
commit b8330855f774c9ce97670de6b78efd2fcd90e251 (HEAD -> edwinmunoz_danieltobar)
Author: Edwin <edwindanilo1110@udenar.edu.co>
Date:   Sat Feb 22 04:13:30 2025 +0800

    Agrego salsas

 1.commit/sandwich.txt | 4 ++++
 1 file changed, 4 insertions(+)

commit dc8ad993f0c613ea392ff7f00fb22eda74b2ba5b
Author: Edwin <edwindanilo1110@udenar.edu.co>
Date:   Sat Feb 22 04:05:24 2025 +0800

    agrego mi sandwich.txt

 1.commit/sandwich.txt | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

commit fafdc7f0bd9a9a556a616c14ff783605909f3803 (origin/practica2025, origin/main, origin/HEAD, main)
:

Se observa información más detallada de cada commit, esta vez incluyendo las acciones realizadas en cada commit si se agregar o quitaron lineas y los archivos 
en que se realizaron estos cambios.

11.
# salida git diff dc8a b833
diff --git a/1.commit/sandwich.txt b/1.commit/sandwich.txt
index da1fbe5..e34ddc0 100644
--- a/1.commit/sandwich.txt
+++ b/1.commit/sandwich.txt
@@ -1,6 +1,10 @@
 pan
+salsa de tomate
+mayonesa
 sardina
 queso
+salsa de tomate
 cuy
 lechuga
+salsa de tomate
 pan
\ No newline at end of file

Lo primero que se observa es que el archivo sandwich.txt en la carperta 1.commit ha cambiado, antes el archivo tenía 6 (-1,6) líneas y ahora tiene 10 (+1,10)
En este caso se aumentaron varias líneas de salsa de tomate (aparece un + a lado del nombre) y una linea de mayonesa
Por ultimo muestra que el archivo no tiene una línea nueva (\n) al final en la versión nueva.


14.
En los cambios para el commit aparece sandwich2_feo.txt como nuevo archivo. En la lista de archivos sin seguimiento sigue sin cambios.
Luego de hacer el commit el archivo sandwich2_feo.txt ya no aparece en listos para commit y en la lista de archivos sin seguimiento sigue sin cambios.

Al ejecutar "git log --oneline" tenemos:

fea33a6 (HEAD -> edwinmunoz_danieltobar) se agrega sandwich2_feo
b833085 Agrego salsas
dc8ad99 agrego mi sandwich.txt
fafdc7f (origin/practica2025, origin/main, origin/HEAD, main) cambio readme.md
5d6dc69 cambio de rama master a main en documentación
3f74d4d primer commit

Donde podemos observar que aparece el nuevo commit "se agrega sandwich2_feo"

15. 
# salida git status

On branch edwinmunoz_danieltobar
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        deleted:    sandwich2_feo.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        edwin_munoz_daniel_tobar.txt

En los cambios para el commit aparece sandwich2_feo.txt como archivo eliminado. En la lista de archivos sin seguimiento sigue sin cambios.

# salida git status depues de hacer el commit

On branch edwinmunoz_danieltobar
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        edwin_munoz_daniel_tobar.txt
nothing added to commit but untracked files present (use "git add" to track)

En los cambios para el commit ya no aparece sandwich2_feo.txt como archivo eliminado. En la lista de archivos sin seguimiento sigue sin cambios.

16.
# salida git log --stat
commit 124bd86e8755dc7c7d600dbff9065aae24815382 (HEAD -> edwinmunoz_danieltobar)
Author: Edwin <edwindanilo1110@udenar.edu.co>
Date:   Mon Feb 24 11:50:05 2025 -0500

    se elimina sandwich2_feo

 1.commit/sandwich2_feo.txt | 10 ----------
 1 file changed, 10 deletions(-)

commit fea33a63514d94d71a0c5f03147f08e4a9333a75
Author: Edwin <edwindanilo1110@udenar.edu.co>
Date:   Mon Feb 24 11:41:16 2025 -0500

    se agrega sandwich2_feo

 1.commit/sandwich2_feo.txt | 10 ++++++++++
 1 file changed, 10 insertions(+)

commit b8330855f774c9ce97670de6b78efd2fcd90e251
Author: Edwin <edwindanilo1110@udenar.edu.co>
Date:   Sat Feb 22 04:13:30 2025 +0800

    Agrego salsas

 1.commit/sandwich.txt | 4 ++++
 1 file changed, 4 insertions(+)

commit dc8ad993f0c613ea392ff7f00fb22eda74b2ba5b
Author: Edwin <edwindanilo1110@udenar.edu.co>
Date:   Sat Feb 22 04:05:24 2025 +0800

    agrego mi sandwich.txt

 1.commit/sandwich.txt | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

Al ejecutar el comando git log --status nos sale un historial de los commits realizados junto información detallada como un codigo extenso que es el ID del commit,
la branch donde se realizo, el autor y la fecha. Seguido también por el nombre del commit. 
El orden en que aparecen los commits es desde el último commit realizado hasta el primero
También	se muestra el archivo al cual se realizaron los cambios y que tipo de cambios fueron realizados ya sea lineas agregadas o eliminadas.